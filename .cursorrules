# Cursor AI Rules for R F1 Analytics Project

## Project Context
This is an R project for Formula 1 data analysis and visualization using the f1dataR package.
Version control: Jujutsu (jj) for local development, git for remote operations.

## Code Generation Rules

### R Code Style
- Follow tidyverse style guide
- Use snake_case for variables and functions
- Prefer tidyverse functions (dplyr, ggplot2) over base R when appropriate
- Use the pipe operator `|>` (base R pipe) or `%>%` (magrittr pipe)
- Add comments for complex data transformations
- Include roxygen2-style documentation for functions

### File Organization
- Place analysis scripts in `scripts/`
- Save generated plots to `plots/` (this directory is gitignored)
- Use descriptive filenames: `verb_subject.R` (e.g., `plot_lap_times.R`)

### Data Handling
- Always cache f1dataR API responses to avoid repeated calls
- Handle missing data gracefully with informative error messages
- Document data sources and fetch dates in comments
- Validate data before visualization

### Visualization Standards
- Use consistent theme across all plots (theme_minimal() or custom theme)
- Include proper titles, axis labels, and legends
- Export plots at high resolution (300+ dpi)
- Use colorblind-friendly palettes
- Add source attribution for data

### Dependencies
- Core packages: ggplot2, dplyr, tidyr, lubridate, scales
- F1 data: f1dataR (from GitHub: SCasanova/f1dataR)
- Document all package dependencies at top of scripts

## Version Control with Jujutsu (jj)

### Commit Messages
- Use descriptive change descriptions
- Format: "Add/Update/Fix: brief description"
- Example: `jj describe -m "Add qualifying pace comparison plot"`

### Workflow
- Use `jj` commands for local operations
- Use `jj git push` to push to remote
- Squash experimental changes before pushing
- Keep main branch clean and tested

## Testing & Validation
- Test scripts with different seasons/races/drivers
- Verify plots render correctly before committing
- Handle edge cases (sprint races, DSQ, DNS, etc.)
- Run `scripts/render_all_plots.sh` before major commits

## CI/CD Awareness
- GitHub Actions builds plots on push to main
- Plots are deployed to `staging` branch
- Ensure scripts are non-interactive and reproducible
- Include proper error handling for CI environment

## Common Patterns

### Data Fetching Template
```r
# Load required packages
library(f1dataR)
library(dplyr)

# Fetch data with error handling
tryCatch({
  data <- load_some_f1_data(season = 2024)
  saveRDS(data, "data/cache/cached_data.rds")
}, error = function(e) {
  if (file.exists("data/cache/cached_data.rds")) {
    data <- readRDS("data/cache/cached_data.rds")
    message("Using cached data due to API error")
  } else {
    stop("Could not fetch data and no cache available")
  }
})
```

### Plot Template
```r
library(ggplot2)

# Create plot
p <- ggplot(data, aes(x = x, y = y)) +
  geom_point() +
  theme_minimal() +
  labs(
    title = "Descriptive Title",
    subtitle = "Additional context",
    x = "X Label",
    y = "Y Label",
    caption = "Data: f1dataR | Ergast API"
  )

# Save plot
ggsave(
  filename = "plots/descriptive_name.png",
  plot = p,
  width = 10,
  height = 6,
  dpi = 300
)
```

## What NOT to Do
- Don't commit large data files (use .gitignore)
- Don't make API calls in loops without rate limiting
- Don't use absolute file paths (use relative paths)
- Don't generate plots without proper error handling
- Don't push to main without testing scripts

## AI Assistant Behavior
- Suggest analyses based on recent F1 events
- Explain statistical choices and visualization decisions
- Optimize for performance (vectorization, efficient ggplot2)
- Generate publication-ready, well-documented code
- Provide alternatives when multiple approaches exist
- Reference f1dataR documentation when relevant

## Resources
- f1dataR: https://scasanova.github.io/f1dataR/
- Tidyverse: https://www.tidyverse.org/
- ggplot2: https://ggplot2.tidyverse.org/
- Jujutsu: https://github.com/martinvonz/jj
